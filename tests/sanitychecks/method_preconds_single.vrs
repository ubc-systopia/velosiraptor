segment MySegment(base : addr) {
    inbitwidth= 48;
    outbitwidth = 48;

    flags = {
        writable,
        readable,
        executable,
    };

    // the state will be two registers:
    state = StateDef(base: addr) {
        reg address [ 8 ] {
            0 .. 48 val,
        },
        reg length [ 8 ] {
            0 ..  1 present,
            1 ..  2 rw,
            2 ..  3 exec,
            4 .. 48 bytes,
        }
    };

    // just expose the entire state as MMIO interface
    interface = InterfaceDef(base: addr) {
        mmio address [ base, 0, 8 ],
        mmio length [ base, 8, 8 ],
    };

    // add the valid bit
    fn valid() -> bool
       requires state.length.present == 0
    {
        state.length.present == 1
    }

    // define the permission flags
    fn matchflags(flgs : flags) -> bool
    {
        // that one here should throw an error!
        flgs.writable == state.length.rw && flgs.executable == state.length.exec
        && flgs.writable != state.length.rw
        && flgs.writable != state.length.rw
        && flgs.executable != state.length.exec
        && flgs.executable == state.length.exec
    }

    // to calculate the new address, we just add the base address here, if within range
    fn translate(va: vaddr) -> paddr
        requires va < (state.length.bytes << 4);
    {
        va + state.address.val
    }

    synth fn map(va: vaddr, sz: size, flgs: flags, pa : paddr)
        requires va == 0
        requires va > 0

    synth fn protect(va: vaddr, sz: size, flgs: flags);

    synth fn unmap(va: vaddr, sz: size);
 }
