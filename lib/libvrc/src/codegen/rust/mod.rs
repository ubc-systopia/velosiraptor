// Velosiraptor Code Generator
//
//
// MIT License
//
// Copyright (c) 2021 Systopia Lab, Computer Science, University of British Columbia
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! Rust Code Generation Backend

use std::fs;
use std::fs::File;
use std::io::BufWriter;
use std::io::Write;
use std::path::Path;

use crate::ast::Ast;
use crate::codegen::CodeGenBackend;
use crate::codegen::CodeGenError;

/// The rust backend
///
/// # Generated File Structure
///
///  - output/Cargo.toml        the library cargo.toml
///  - output/src/lib.rs        the library file
///  - output/src/consts.rs     the globally defined constants
///  - output/src/<unit>.rs     the unit files
///  - output/src/<unit>_if.rs  the unit interface file
pub struct BackendRust {
    outdir: Option<String>,
    pkgname: String,
    usedirs: Vec<String>,
}

impl BackendRust {
    pub fn new(outdir: Option<String>) -> Self {
        BackendRust {
            outdir,
            pkgname: String::new(),
            usedirs: Vec::new(),
        }
    }

    fn fileheader(&self, f: &mut BufWriter<File>, hdr: &str) -> Result<(), CodeGenError> {
        let mut lines = Vec::new();

        writeln!(
            &mut lines,
            "// THIS FILE IS AUTOGENERATED BY THE VELOSIRAPTOR COMPILER\n"
        )?;
        writeln!(&mut lines, "//\n")?;
        writeln!(&mut lines, "//\n")?;
        writeln!(&mut lines, "// MIT License\n")?;
        writeln!(&mut lines, "//\n")?;
        writeln!(&mut lines, "// Copyright (c) 2021 Systopia Lab, Computer Science, University of British Columbia\n")?;
        writeln!(&mut lines, "//\n")?;
        writeln!(
            &mut lines,
            "// Permission is hereby granted, free of charge, to any person obtaining a copy\n"
        )?;
        writeln!(
            &mut lines,
            "// of this software and associated documentation files (the \"Software\"), to deal\n"
        )?;
        writeln!(
            &mut lines,
            "// in the Software without restriction, including without limitation the rights\n"
        )?;
        writeln!(
            &mut lines,
            "// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
        )?;
        writeln!(
            &mut lines,
            "// copies of the Software, and to permit persons to whom the Software is\n"
        )?;
        writeln!(
            &mut lines,
            "// furnished to do so, subject to the following conditions:\n"
        )?;
        writeln!(&mut lines, "//\n")?;
        writeln!(
            &mut lines,
            "// The above copyright notice and this permission notice shall be included in all\n"
        )?;
        writeln!(
            &mut lines,
            "// copies or substantial portions of the Software.\n"
        )?;
        writeln!(&mut lines, "//\n")?;
        writeln!(
            &mut lines,
            "// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
        )?;
        writeln!(
            &mut lines,
            "// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
        )?;
        writeln!(
            &mut lines,
            "// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
        )?;
        writeln!(
            &mut lines,
            "// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
        )?;
        writeln!(
            &mut lines,
            "// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
        )?;
        writeln!(
            &mut lines,
            "// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
        )?;
        writeln!(&mut lines, "// SOFTWARE.\n\n")?;

        writeln!(&mut lines, "//! {} (auto generated)\n", hdr)?;

        f.write_all(&lines)?;
        Ok(())
    }
}

impl CodeGenBackend for BackendRust {
    fn prepare(&self) -> Result<(), CodeGenError> {
        // create the output directory, if needed
        if let Some(p) = &self.outdir {
            // the root directory
            let path = Path::new(p);

            // create the full path
            fs::create_dir_all(path.join("src"))?;

            // create the Cargo.toml
            let cargofile = File::create(path.join("Cargo.toml"))?;
            let mut cargo = BufWriter::new(cargofile);

            let mut lines = Vec::new();
            writeln!(&mut lines, "[package]")?;
            writeln!(&mut lines, "name = \"{}\"", self.pkgname)?;
            writeln!(
                &mut lines,
                "description = \"Generated translation driver for '{}'\"",
                self.pkgname
            )?;
            writeln!(&mut lines, "license = \"MIT\"")?;
            writeln!(&mut lines, "version = \"0.1.0\"")?;
            writeln!(
                &mut lines,
                "authors = [\"Velosiraptor Compiler <no-reply@velosiraptor>\"]"
            )?;
            writeln!(&mut lines, "edition = \"2018\"")?;
            writeln!(&mut lines, "\n[dependencies]")?;

            cargo.write_all(&lines)?;
            cargo.flush()?;

            // create the
        }
        Ok(())
    }
    fn generate_globals(&self, ast: &Ast) -> Result<(), CodeGenError> {
        for _const in &ast.consts {}
        Ok(())
    }

    fn generate_interfaces(&self, ast: &Ast) -> Result<(), CodeGenError> {
        for _unit in &ast.units {}
        Ok(())
    }

    fn generate_units(&self, _ast: &Ast) -> Result<(), CodeGenError> {
        Ok(())
    }

    fn finalize(&self) -> Result<(), CodeGenError> {
        if let Some(p) = &self.outdir {
            // the root directory
            let mut path = Path::new(p).to_path_buf();

            path.push("src");
            path.push("lib.rs");

            // create the Cargo.toml
            let librs = File::create(path)?;

            let mut librs = BufWriter::new(librs);

            self.fileheader(&mut librs, "")?;

            let mut lines = Vec::new();
            writeln!(&mut lines, "\n")?;
            for u in &self.usedirs {
                writeln!(&mut lines, "pub use {}", u)?;
            }

            librs.write_all(&lines)?;
            librs.flush()?;
        }
        Ok(())
    }
}
