// Velosiraptor Compiler
//
//
// MIT License
//
// Copyright (c) 2022 The University of British Columbia, Vancouver, BC, Canada
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! # The FastModels Platform Generator: State
//!
//! This module generates the register description of the Arm FastModels implementation
//! of the translation register.

// the path buffer
use std::path::Path;

// other libraries
use crustal as C;
use custom_error::custom_error;

// the defined errors
use crate::ast::Interface;
use crate::hwgen::fastmodels::interface::to_interface_class_name;
use crate::hwgen::fastmodels::state::to_state_class_name;
use crate::hwgen::HWGenError;

pub fn to_register_class_name(name: &str) -> String {
    format!("{}{}Register", name[0..1].to_uppercase(), &name[1..])
}

pub fn generate_register_header(
    name: &str,
    interface: &Interface,
    outdir: &Path,
) -> Result<(), HWGenError> {
    let mut scope = C::Scope::new();
    scope.set_filename("include/register.hpp");

    let ifn = to_interface_class_name(name);
    let scn = to_state_class_name(name);
    let ucn = to_register_class_name(name);

    scope.push_doc_str(format!("The Registers of the '{}' Translation Unit\n\n", scn).as_str());
    scope.push_doc_str("WARNING: This file is auto-generated by the  Velosiraptor compiler.\n");

    // set the header guard
    let guard = scope.new_ifdef(format!("{}_REGISTERS_HPP_", name.to_uppercase()).as_str());

    // create the scope guard
    let s = guard.guard().then_scope();

    s.new_comment("framework includes");
    s.new_include("generic/types.hpp", true);
    s.new_include("generic/register_base.hpp", true);

    s.new_comment("translation register specific includes");
    s.new_include("state.hpp", true);

    if !interface.is_register() {
        scope.to_file(outdir, true)?;
        return Ok(());
    }

    for f in interface.fields() {
        let rcn = to_register_class_name(&f.field.name);
        // create a new class in the scope
        let c = s.new_class(rcn.as_str());
        c.set_base("RegisterBase", C::Visibility::Public);

        let state_ptr_type = C::Type::from_ptr(&C::Type::new_class(&scn));
        c.new_constructor().new_argument("state", state_ptr_type);

        c.new_method("do_read", C::Type::new_int(64))
            .public()
            .overrid();
        c.new_method("do_write", C::Type::new_void())
            .overrid()
            .public()
            .new_argument("data", C::Type::new_int(64));
    }

    // save the scope
    scope.to_file(outdir, true)?;

    Ok(())
}

pub fn generate_register_impl(
    name: &str,
    interface: &Interface,
    outdir: &Path,
) -> Result<(), HWGenError> {
    let mut scope = C::Scope::new();
    scope.set_filename("register.cpp");

    let ifn = to_interface_class_name(name);
    let scn = to_state_class_name(name);
    let ucn = to_register_class_name(name);

    scope.push_doc_str(format!("The Registers of the '{}' Translation Unit\n\n", scn).as_str());
    scope.push_doc_str("WARNING: This file is auto-generated by the  Velosiraptor compiler.\n");

    scope.new_comment("framework includes");
    scope.new_include("generic/types.hpp", true);
    scope.new_include("generic/logging.hpp", true);

    scope.new_comment("translation register specific includes");
    scope.new_include("registers.hpp", true);

    if !interface.is_register() {
        scope.to_file(outdir, false)?;
        return Ok(());
    }

    for f in interface.fields() {
        let rcn = to_register_class_name(&f.field.name);
        // create a new class in the scope
        let c = scope.new_class(rcn.as_str());
        c.set_base("RegisterBase", C::Visibility::Public);

        let state_ptr_type = C::Type::from_ptr(&C::Type::new_class(&scn));
        let stvar = C::Expr::new_var("st", state_ptr_type.clone());

        let cons = c.new_constructor();

        let cparam = C::MethodParam::new("state", state_ptr_type);
        cons.push_parent_initializer(C::Expr::fn_call(
            "RegisterBase",
            vec![
                C::Expr::new_str(&f.field.name),
                C::Expr::ConstNum(f.field.offset()),
                C::Expr::ConstNum(f.field.length),
                C::Expr::Raw(String::from("ACCESS_PERMISSION_ALL")),
                C::Expr::ConstNum(0),
                C::Expr::from_method_param(&cparam),
            ],
        ))
        .push_argument(cparam);

        let mut field_access_expr =
            C::Expr::method_call(&stvar, &format!("get_{}_field", f.field.name), vec![]);
        field_access_expr.set_ptr();

        c.new_method("do_read", C::Type::new_int(64))
            .overrid()
            .push_stmt(C::Stmt::fn_call(C::Expr::fn_call(
                "Logging::debug",
                vec![C::Expr::new_str("Register::do_read()")],
            )))
            .push_stmt(C::Stmt::Raw(String::from(
                "auto st = static_cast<TranslationUnitState *>(this->get_state())",
            )))
            .push_stmt(C::Stmt::retval(C::Expr::method_call(
                &field_access_expr,
                "get_value",
                vec![],
            )));

        c.new_method("do_write", C::Type::new_void())
            .overrid()
            .push_stmt(C::Stmt::fn_call(C::Expr::fn_call(
                "Logging::debug",
                vec![C::Expr::new_str("Register::do_write()")],
            )))
            .push_stmt(C::Stmt::Raw(String::from(
                "auto st = static_cast<TranslationUnitState *>(this->get_state())",
            )))
            .push_stmt(C::Stmt::fn_call(C::Expr::method_call(
                &field_access_expr,
                "set_value",
                vec![C::Expr::new_var("data", C::Type::new_int(64))],
            )))
            .new_argument("data", C::Type::new_int(64));
    }

    // /*
    //  * -----------------------------------------------------------------------------------------------
    //  * Control Register
    //  * -----------------------------------------------------------------------------------------------
    //  */
    // #define CONTROL_REGISTER_BASE_ADDRESS 0x0
    // #define CONTROL_REGISTER_WIDTH        4
    // #define CONTROL_REGISTER_PERMS        ACCESS_PERMISSION_ALL
    // #define CONTROL_REGISTER_VALUE        0x0

    // ControlRegister::ControlRegister(TranslationUnitState *state)
    //     : RegisterBase("control", CONTROL_REGISTER_BASE_ADDRESS, CONTROL_REGISTER_WIDTH,
    //                    CONTROL_REGISTER_PERMS, CONTROL_REGISTER_VALUE, state)
    // {
    // }

    // uint64_t ControlRegister::do_read(void)
    // {
    //     Logging::debug("ControlRegister::do_read()");
    //     auto st = static_cast<TranslationUnitState *>(this->get_state());
    //     return st->control_field()->get_value();
    // }

    // void ControlRegister::do_write(uint64_t value)
    // {
    //     Logging::debug("ControlRegister::do_write() = 0%lx", this->get_idx(), value);
    //     auto st = static_cast<TranslationUnitState *>(this->get_state());
    //     st->control_field()->set_value(value);
    // }

    scope.to_file(outdir, false)?;

    Ok(())
}
