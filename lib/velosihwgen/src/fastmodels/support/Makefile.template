# Arm FastModels Translation Unit Components
#
# SPDX-License-Identifier: MIT
#
# Copyright (C) 2023, Reto Achermann (The University of British Columbia)

# This file is (from) a template, where holes of the form /* REPLACE xyz */ are filled in

BUILD_DIR := $(CURDIR)/build
FRAMEWORK_DIR := $(CURDIR)/fm_translation_framework

CC      := g++
CCFLAGS := -Wall -O3 -Werror -std=c++2a -fPIC
CCFLAGS += -I .
CCFLAGS += -I $(FRAMEWORK_DIR)
CCFLAGS += -I $(PVLIB_HOME)/include
CCFLAGS += -I $(PVLIB_HOME)/include/fmruntime
CCFLAGS += -MMD -MP

# add a definition if we are in the test modes
ifeq ($(TEST_MOCK_FAST_MODELS),1)
CCFLAGS += -DTEST_MOCK_FAST_MODELS=1
endif

AR      := ar
ARFLAGS := rcs
LD      := g++
LDFLAGS := -pthread
MKDIR := mkdir -p
SIMGEN := simgen

# Source Files
TRANSLATION_UNIT_SRCS := /* REPLACE unit_srcs */
# TRANSLATION_UNIT_SRCS := unit.cpp ...
TRANSLATION_UNIT_SRCS += /* REPLACE pkgname */_registers.cpp

# Object Files
TRANSLATION_UNIT_OBJS := $(TRANSLATION_UNIT_SRCS:%.cpp=$(BUILD_DIR)/objs/%.o)

TRANSLATION_UNIT_LIB  := $(BUILD_DIR)/lib/libunit.a

unitlib: $(TRANSLATION_UNIT_LIB)

FRAMEWORK_LIB := $(FRAMEWORK_DIR)/build/lib/libframework.a

frameworklib: $(FRAMEWORK_LIB)

$(FRAMEWORK_LIB):
	make -C fm_translation_framework

# the main thing
$(TRANSLATION_UNIT_LIB): $(TRANSLATION_UNIT_OBJS)
	$(MKDIR) $(@D)
	$(AR) $(ARFLAGS) -o $@ $^

PLATFORM_BIN  := $(BUILD_DIR)/plat_example_sim
PLATFORM_PROJ := platform/Platform.sgproj
PLATFORM_LISA := platform/Platform.lisa

$(PLATFORM_BIN): $(TRANSLATION_UNIT_LIB) $(PLATFORM_LISA) $(PLATFORM_PROJ) /* REPLACE pkgname */.lisa
	$(MKDIR) $(@D)
	BUILD_DIR=$(BUILD_DIR) $(SIMGEN) -v on --num-comps-file 50  --num-build-cpus 8 --gen-sysgen --warnings-as-errors \
									 -p $(PLATFORM_PROJ) --build-directory $(BUILD_DIR)/plat_example -b
	ln -s -f $(BUILD_DIR)/plat_example/isim_system $@

run: $(PLATFORM_BIN)
	$(PLATFORM_BIN) --data Memory0=bootimg.bin@0x0

.DEFAULT_GOAL = all
all: $(FRAMEWORK_LIB) $(TRANSLATION_UNIT_LIB) $(PLATFORM_BIN)
lib: $(TRANSLATION_UNIT_LIB)

$(BUILD_DIR)/objs/%.o: %.cpp
	$(MKDIR) $(@D)
	$(CC) $(CCFLAGS) -c -o $@ $<

# A small script to build on an armfm-supported platform
# Assumes the docker image has been built (see dockerfile) and a container is running
D_IMG := armfm_img
D_CON := armfmtest
D_DIR := /velosihwgen_build

ifdef RUN_TEST
	RUN_TEST_REL:=../test/$(notdir $(RUN_TEST))
endif

# /bin/bash -i will source .bashrc and set armfm env variables
dockerhw:
	docker restart $(D_CON) # prevent dead process accumulation in development
	docker exec $(D_CON) /bin/bash -c "rm -r $(D_DIR)" || true
	docker exec $(D_CON) /bin/bash -c "mkdir -p $(D_DIR)"
	docker cp $(CURDIR)/. $(D_CON):$(D_DIR)

# bad hack. should move armfm-boot to hwgen support dir instead of the top-level one
	docker cp $(CURDIR)/../../../../../../support/arm-fastmodels-boot/. $(D_CON):$(D_DIR)/arm-fastmodels-boot

# this makefile can be called with RUN_TEST="t.c" with t.c in test dir
# ifdef RUN_TEST
	docker cp $(CURDIR)/../../../../src/fastmodels/test/. $(D_CON):$(D_DIR)/test
# endif
	docker exec $(D_CON) /bin/bash -i -c "cd $(D_DIR)/arm-fastmodels-boot && make VRS_TEST=\"$(RUN_TEST_REL)\" && cp bootimg.bin $(D_DIR)"
	docker exec $(D_CON) /bin/bash -i -c "cd $(D_DIR) && make clean && make && make run"

.PHONY: all clean dockerhw run

clean:
	rm -rf $(BUILD_DIR)
