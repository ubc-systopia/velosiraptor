# Arm FastModels Translation Unit Components
#
# SPDX-License-Identifier: MIT
#
# Copyright (C) 2023, Reto Achermann (The University of British Columbia)

# This file is auto-generated

# Set the build directory
BUILD_DIR := $(CURDIR)/build
SOURCE_DIR := $(CURDIR)/src
FRAMEWORK_DIR := $(CURDIR)/fm_translation_framework

# compiler flags
CC      := g++
CCFLAGS := -Wall -O3 -Werror -std=c++2a -fPIC
CCFLAGS += -I $(SOURCE_DIR)
CCFLAGS += -I $(FRAMEWORK_DIR)
CCFLAGS += -I $(PVLIB_HOME)/include
CCFLAGS += -I $(PVLIB_HOME)/include/fmruntime
CCFLAGS += -MMD -MP

# archive flags
AR      := ar
ARFLAGS := rcs

# linker flags
LD      := g++
LDFLAGS := -pthread

# creating directories
MKDIR := mkdir -p

# the simgen tool
SIMGEN := simgen

# Source Files
TRANSLATION_UNIT_SRCS := $(SOURCE_DIR)//* REPLACE top_file */
# TRANSLATION_UNIT_SRCS := $(SOURCE_DIR)/unit.cpp
TRANSLATION_UNIT_SRCS += $(SOURCE_DIR)//* REPLACE pkgname */_registers.hpp

# Object Files
TRANSLATION_UNIT_OBJS := $(TRANSLATION_UNIT_SRCS:$(SOURCE_DIR)/%.cpp=$(BUILD_DIR)/objs/%.o)

# The Translation Unit Library
TRANSLATION_UNIT_LIB  := $(BUILD_DIR)/lib/libunit.a

FRAMEWORK_LIB := $(FRAMEWORK_DIR)/build/lib/libframework.a

$(FRAMEWORK_LIB):
	make -C fm_translation_framework

# building the library
$(TRANSLATION_UNIT_LIB): $(TRANSLATION_UNIT_OBJS)
	$(MKDIR) $(@D)
	$(AR) $(ARFLAGS) -o $@ $^

PLATFORM_BIN  := $(BUILD_DIR)/plat_example_sim
PLATFORM_PROJ := platform/Platform.sgproj
PLATFORM_LISA := platform/Platform.lisa

$(PLATFORM_BIN): $(TRANSLATION_UNIT_LIB) $(PLATFORM_LISA) $(PLATFORM_PROJ) /* REPLACE pkgname */.lisa
	$(MKDIR) $(@D)
	BUILD_DIR=$(BUILD_DIR) $(SIMGEN) -v on --num-comps-file 50 --gen-sysgen --warnings-as-errors \
									 -p $(PLATFORM_PROJ) --build-directory $(BUILD_DIR)/plat_example -b
	ln -s -f $(BUILD_DIR)/plat_example/isim_system $@

run: $(PLATFORM_BIN)
	$(PLATFORM_BIN) --data Memory0=bootimg.bin@0x0

# Targets
.DEFAULT_GOAL = all
all: $(FRAMEWORK_LIB) $(TRANSLATION_UNIT_LIB) $(PLATFORM_BIN)
lib: $(TRANSLATION_UNIT_LIB)

# Compilation Rules
$(BUILD_DIR)/objs/%.o: $(SOURCE_DIR)/%.cpp
	$(MKDIR) $(@D)
	$(CC) $(CCFLAGS) -c -o $@ $<

# clean up
clean:
	rm -rf $(BUILD_DIR)
