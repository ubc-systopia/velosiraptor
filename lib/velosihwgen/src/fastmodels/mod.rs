// Velosiraptor Compiler
//
//
// MIT License
//
// Copyright (c) 2022 The University of British Columbia, Vancouver, BC, Canada
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! # The FastModels Platform Generator
//!
//! This module contains a generator for a Arm FastModels component.

use std::collections::HashMap;
// the used external libraries
use std::fs;
use std::fs::File;
use std::io::{BufWriter, Read, Write};
use std::path::{Path, PathBuf};

// other libraries
use crustal as C;

// the library
use crate::VelosiHwGenBackend;
use crate::VelosiHwGenError;
use crate::COPYRIGHT;
use velosiast::VelosiAst;

// the generators
// mod state;
// use state::{state_impl_file};
// mod interface;
// use interface::{interface_impl_file};
mod unit;
use unit::generate_unit_header;
mod registers;
use registers::{generate_register_header, generate_register_impl};

use self::unit::unit_header_file;

/// # The Arm FastModels Platform Module
///
/// This generator produces a component for the Arm FastModels simulator using the
/// `TranslationUnit` support library.
///
/// ## Generated File Structure
///
/// outdir/hw/fastmodels/Makefile
/// outdir/hw/fastmodels/<vrs>.lisa
/// outdir/hw/fastmodels/bootimg.bin
/// outdir/hw/fastmodels/<vrs>_registers.cpp
/// outdir/hw/fastmodels/<vrs>_registers.hpp
/// outdir/hw/fastmodels/platform/Platform.sgproj
/// outdir/hw/fastmodels/platform/Platform.lisa
///
/// for subunit in vrs:
///    outdir/hw/fastmodels/src/<subunit>.cpp
///
/// outdir/hw/fastmodels/fm-translation-framework/
/// outdir/hw/fastmodels/fm-translation-framework/accessmode.hpp
/// outdir/hw/fastmodels/fm-translation-framework/interface_base.hpp
/// outdir/hw/fastmodels/fm-translation-framework/logging.hpp
/// outdir/hw/fastmodels/fm-translation-framework/register_base.hpp
/// outdir/hw/fastmodels/fm-translation-framework/state_base.hpp
/// outdir/hw/fastmodels/fm-translation-framework/state_field_base.hpp
/// outdir/hw/fastmodels/fm-translation-framework/translation_unit_base.hpp
/// outdir/hw/fastmodels/fm-translation-framework/types.hpp

pub struct ArmFastModelsModule {
    outdir: PathBuf,
    support_dir: PathBuf,
    pkgname: String,
    framework_dir: String, // relative to outdir
}

pub fn add_header_comment(scope: &mut C::Scope, unit: &str, comp: &str) {
    scope.push_doc_str(format!("The {} of the '{}' translation unit\n\n", comp, unit).as_str());
    scope.push_doc_str(COPYRIGHT);
    scope.push_doc_str("WARNING: This file is auto-generated by the Velosiraptor compiler.\n");
}

impl ArmFastModelsModule {
    pub fn new(hwdir: &Path, pkgname: String) -> ArmFastModelsModule {
        let manifest_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap();

        let support_dir = Path::new(&manifest_dir)
            .join("src")
            .join("fastmodels")
            .join("support");

        ArmFastModelsModule {
            outdir: hwdir.join("fastmodels"),
            framework_dir: "fm_translation_framework".to_string(),
            support_dir,
            pkgname,
        }
    }

    fn generate_top_makefile(&self, ast: &VelosiAst) -> Result<(), VelosiHwGenError> {
        let makefile = File::create(&self.outdir.join("Makefile"))?;
        let mut f = BufWriter::new(makefile);

        writeln!(f, "# This file is auto-generated\n")?;

        writeln!(f, "FRAMEWORK_DIR={}", self.framework_dir)?;
        writeln!(f, "SUPPORT_DIR=support")?;

        writeln!(f, "\nall: deps_framework")?;
        writeln!(f, "\tmake -C {}", self.framework_dir)?;
        for u in ast.units() {
            if u.is_abstract() {
                continue;
            }
            // writeln!(f, "\tmake -d -I framework/build/include -C {}", u.ident())?;
            writeln!(f, "\tmake -C {}", u.ident())?;
        }

        writeln!(f, "\nclean:")?;
        writeln!(f, "\trm -rf {}", self.framework_dir)?;

        f.flush()?;

        Ok(())
    }

    fn generate_unit_makefile(&self, name: &str, out: &Path) -> Result<(), VelosiHwGenError> {
        let makefile = File::create(out.join("Makefile"))?;
        let mut f = BufWriter::new(makefile);

        let lib = format!("lib{}.a", self.pkgname);

        writeln!(f, "# This file is auto-generated")?;

        // flags for the compiler
        writeln!(f, "\n# Set the build directory")?;
        writeln!(f, "BUILD_DIR := $(CURDIR)/build")?;
        writeln!(f, "SOURCE_DIR := $(CURDIR)")?;
        writeln!(f, "FRAMEWORK_DIR ?= $(CURDIR)/../{}", self.framework_dir)?;

        writeln!(f, "# compiler flags")?;
        writeln!(
            f,
            "# PVLIB_HOME should be set by the fastmodels setup script"
        )?;
        writeln!(f, "CC      := g++")?;
        writeln!(f, "CCFLAGS := -Wall -O3 -Werror -std=c++2a -fPIC")?;

        // should probably include something from frameworkdir/build/(?)
        writeln!(f, "CCFLAGS += -I $(FRAMEWORK_DIR)")?;
        writeln!(f, "CCFLAGS += -I $(PVLIB_HOME)/include")?;
        writeln!(f, "CCFLAGS += -I $(PVLIB_HOME)/include/fmruntime")?;
        writeln!(f, "CCFLAGS += -MMD -MP")?;

        // flags for creating the static library
        writeln!(f, "# archive flags")?;
        writeln!(f, "AR      := ar")?;
        writeln!(f, "ARFLAGS := rcs")?;

        // creating directories
        writeln!(f, "# creating directories")?;
        writeln!(f, "MKDIR := mkdir -p")?;

        writeln!(f, "\n# Source Files")?;
        writeln!(
            f,
            "TRANSLATION_UNIT_SRCS := $(SOURCE_DIR)/{}",
            unit_header_file(name)
        )?;
        // writeln!(
        //     f,
        //     "TRANSLATION_UNIT_SRCS += $(SOURCE_DIR)/{}",
        //     interface_impl_file(name)
        // )?;
        // writeln!(
        //     f,
        //     "TRANSLATION_UNIT_SRCS += $(SOURCE_DIR)/{}",
        //     state_impl_file(name)
        // )?;

        writeln!(f, "\n# Object Files")?;
        writeln!(
            f,
            "TRANSLATION_UNIT_OBJS := $(TRANSLATION_UNIT_SRCS:$(SOURCE_DIR)/%.cpp=$(BUILD_DIR)/objs/%.o)"
        )?;

        writeln!(f, "\n# The Translation Unit Library")?;
        writeln!(f, "TRANSLATION_UNIT_LIB  := $(BUILD_DIR)/{}", lib)?;

        // rule to build the library
        writeln!(f, "\n# building the library")?;
        writeln!(f, "$(TRANSLATION_UNIT_LIB): $(TRANSLATION_UNIT_OBJS)")?;
        writeln!(f, "\t$(MKDIR) $(@D)")?;
        writeln!(f, "\t$(AR) $(ARFLAGS) -o $@ $^")?;

        writeln!(f, "\n# Targets")?;
        writeln!(f, ".DEFAULT_GOAL = all")?;
        writeln!(f, "all: $(TRANSLATION_UNIT_LIB)")?;

        // compilation rules
        writeln!(f, "\n# Compilation Rules")?;
        writeln!(f, "$(BUILD_DIR)/objs/%.o: $(SOURCE_DIR)/%.cpp")?;
        writeln!(f, "\t$(MKDIR) $(@D)")?;
        writeln!(f, "\t$(CC) $(CCFLAGS) -c -o $@ $<")?;

        // other rules
        writeln!(f, "\n# clean up")?;
        writeln!(f, "clean:")?;
        writeln!(f, "\trm -rf $(BUILD_DIR)")?;

        f.flush()?;

        Ok(())
    }
}

fn copy_recursive(src: impl AsRef<Path>, dst: impl AsRef<Path>) -> std::io::Result<()> {
    fs::create_dir_all(&dst)?;
    for entry in fs::read_dir(src)? {
        let entry = entry?;
        let ty = entry.file_type()?;
        if ty.is_dir() {
            copy_recursive(entry.path(), dst.as_ref().join(entry.file_name()))?;
        } else {
            fs::copy(entry.path(), dst.as_ref().join(entry.file_name()))?;
        }
    }
    Ok(())
}

// Find-and-replace for support files
fn fill_template(
    src: impl AsRef<Path>,
    dst: impl AsRef<Path>,
    subs: HashMap<&String, &String>,
) -> std::io::Result<()> {
    let mut data = String::new();
    let mut f = File::open(src).unwrap();
    f.read_to_string(&mut data)?;

    for (k, v) in subs {
        data = data.replace(k, v);
    }

    let mut out = File::create(dst)?;
    let _n = out.write(data.as_bytes())?;

    Ok(())
}

impl VelosiHwGenBackend for ArmFastModelsModule {
    fn prepare(&self) -> Result<(), VelosiHwGenError> {
        fs::create_dir_all(self.outdir.join("src"))?;
        fs::create_dir_all(self.outdir.join("platform"))?;

        fs::copy(
            self.support_dir.join("bootimg.bin"),
            self.outdir.join("bootimg.bin"),
        )?;

        copy_recursive(
            self.support_dir.join("fm_translation_framework"),
            self.outdir.join("fm_translation_framework"),
        )?;

        Ok(())
    }

    fn generate(&self, ast: &VelosiAst) -> Result<(), VelosiHwGenError> {
        let top_files = velosicomposition::Relations::from_ast(ast).get_roots();
        if top_files.len() != 1 {
            panic!("!= 1 root unit found");
        }
        let top_file = unit_header_file(&top_files[0]);

        fill_template(
            self.support_dir.join("TranslationUnit.lisa.template"),
            &self.outdir.join(format!("{}.lisa", self.pkgname)),
            HashMap::from([
                (&"/* REPLACE top_class */".to_string(), &self.pkgname),
                (&"/* REPLACE top_file */".to_string(), &top_file),
            ]),
        )?;

        fill_template(
            self.support_dir.join("Platform.lisa.template"),
            &self.outdir.join("platform/Platform.lisa"),
            HashMap::from([(&"/* REPLACE top_class */".to_string(), &self.pkgname)]),
        )?;

        fill_template(
            self.support_dir.join("Platform.sgproj.template"),
            &self.outdir.join("platform/Platform.sgproj"),
            HashMap::from([(&"/* REPLACE pkgname */".to_string(), &self.pkgname)]),
        )?;

        // check all units for registers and put them in the main directory
        generate_register_header(&self.pkgname, ast, &self.outdir.join("src"))?;
        generate_register_impl(&self.pkgname, ast, &self.outdir.join("src"))?;

        for u in ast.units() {
            if u.is_abstract() {
                continue;
            }
            generate_unit_header(u, &self.outdir.join("src"))?;
        }

        self.generate_top_makefile(ast)?;

        Ok(())
    }

    fn finalize(&self) -> Result<(), VelosiHwGenError> {
        Ok(())
    }
}
