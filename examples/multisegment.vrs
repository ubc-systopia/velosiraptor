/*
 * This specification expresses a hypothetical direct segment. This is a single, contiguous
 * region of memory that is translated using a segment-like approach.
 *
 * The segment has a given maximum size, but the actual size can be configured.
 * Moreover, the translation functionality can be disabled.
 *
 * The state is given by two registers:
 *   base: that defines the base address and the permissions
 *   size: the active size of the segment
 *
 * The minimum translation size is 64 bytes.
 * The translation size is a multiple of 64 bytes.
 */

flags {
    writable,
    readable,
    executable,
}

// the page size that is being translated
const PAGE_SIZE : size = 2 * 1024 * 1024;

// the number of regions that are being translated
const NUM_REGIONS: size = 4;

segment SingleSegment(base : addr) {

    // let's assume the maximum size of the segment is 40 bits.
    inbitwidth= 48;

    // let's assume the maximum output bit size is 48 bits
    outbitwidth = 48;

    // the state will be two registers:
    state(base: addr) {
        reg seg [ 8 ] {
            0 ..  1 present,
            1 ..  2 rw,
            2 ..  3 exec,
            4 .. 48 address,
        }
    }

    // just expose the entire state as MMIO interface
    interface(base: addr) {
        mmio seg [ base, 0, 8 ],
    }

    // add the valid bit
    fn valid() -> bool {
        state.seg.present == 1
    }

    // define the permission flags
    fn matchflags(flgs : flags) -> bool
    {
        flgs.writable == state.seg.rw && flgs.executable == state.seg.exec
    }

    // to calculate the new address, we just add the base address here, if within range
    fn translate(va: vaddr) -> paddr
        requires va < PAGE_SIZE
    {
        va + state.seg.address << 4
    }

    synth fn map(va: vaddr, sz: size, flgs: flags, pa : paddr)
        requires sz == PAGE_SIZE
        requires va == 0
        requires (pa & (PAGE_SIZE - 1)) == 0

    synth fn protect(va: vaddr, sz: size, flgs: flags)
        requires sz == PAGE_SIZE
        requires va == 0

    synth fn unmap(va: vaddr, sz: size)
        requires sz == PAGE_SIZE
        requires va == 0
 }



// represents an x86 page directory entry
staticmap X8632PageDirectory(base : paddr) {
    maps [ SingleSegment(base + i * 8) for i in 0..NUM_REGIONS ]
}