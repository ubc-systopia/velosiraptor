/*
 * 32-bit paging on the x86 architecture involves a two-level page table. For simplicity, we focus
 * here on the leaf page table.
 *
 * A single page table is 4 KiB in total. It contains 1024 32-bit page-table entries.
 * The page table as a whole must be naturally aligned (4 KiB).
 * This also ensures that each entry is naturally aligned to 32-bits (or 4 bytes)
 *
 * The layout of a page table entry is as follows:
 * ```
 *     Bit(s)          Contents
 *     0       (P)     Present; must be 1 to map a 4-KByte page
 *     1       (R/W)   Read/write; if 0, writes may not be allowed to the 4-KByte page referenced
 *                     by this entry
 *     2       (U/S)   User/supervisor; if 0, user-mode accesses are not allowed to the 4-KByte
 *                     page referenced by this entry
 *     3       (PWT)   Page-level write-through; indirectly determines the memory type used to
 *                     access the 4-KByte page referenced by this entry
 *     4       (PCD)   Page-level cache disable; indirectly determines the memory type used to
 *                     access the 4-KByte page referenced by this entry
 *     5       (A)     Accessed; indicates whether software has accessed the 4-KByte page referenced
 *                     by this entry
 *     6       (D)     Dirty; indicates whether software has written to the 4-KByte page referenced by
 *                     this entry
 *     7       (PAT)   If the PAT is supported, indirectly determines the memory type used to access
 *                     the 4-KByte page referenced by this entry; otherwise, reserved (must be 0) 1
 *     8       (G)     Global; if CR4.PGE = 1, determines whether the translation is global;
 *                     ignored otherwise
 *     11:9    (IGN)   Ignored
 *     31:12           Physical address of the 4-KByte page referenced by this entry
 * ```
 */

// represents an x86 page table entry
unit Simple(base : addr) : Segment {
    // the state
    state = Memory(base : addr) {
        address [base, 0, 8] {
           0  63 base
        };
        sz [base, 8, 8] {
            0  63 bytes
        };
        flags [base, 16, 8] {
            0 0 present
        };
    };

    interface = Memory(base : addr) {
        address [base, 0, 8] {
            Layout {
                0  63 base
            };
            ReadAction {
                interface.address <- state.address;
            };
            WriteAction {
                interface.address -> state.address;
            };
        };
        sz [base, 8, 8] {
            Layout {
                0  63 bytes
            };
            ReadAction {
                interface.sz <- state.sz;
            };
            WriteAction {
                interface.sz -> state.sz;
            };
        };
        flags [base, 16, 8] {
            Layout {
                0 0 present
            };
            ReadAction {
                interface.flags <- state.flags;
            };
            WriteAction {
                interface.flags -> state.flags;
            };
        };
    };


    // unmapping an entry
    fn unmap(va: addr, sz: size) -> bool
        // need a way to express:
        // forall a | va <= a < va + sz :: fail(translate(a, ANY))
        ensures translate(va, 0) == 0;
    ;

    // mapping an entry
    fn map(va: addr, sz: size, flags: int, pa : addr) -> bool
        //requires (addr %  4096) == 0;
        // need a way to express types:
        // type(addr) == Memory || type(addr) == DevMemory;
        // type(addr) == DevMemory ==> flags & CACHE_DISABLED
        //
        requires va == 0x0;
        requires pa <= 0xffffffffffff;
        requires pa + sz <= 0xffffffffffff;
        requires sz <= 0xffffffff;
        requires sz >= 16;

        ensures forall i : addr :: 0 <= i && i < sz && translate(va + i, flags) == pa + i;
        ensures translate(va, flags) == pa;
    ;


    // protecting the entry, i.e., change its permission
    fn protect(flags: int) -> bool
        //ensures match_flags(flags);
    {
        // update the entry
        // ensures match_flags(flags) ==> translate(a) == translate(a)
        return true;
    }


    // the translation semantics, adding an option type?
    fn translate(va: addr, flags: int) -> addr
        requires va < state.sz.bytes;
        requires state.flags.present == 1;
    {
        return va + state.address.base;
    }
};
