/*
 * This specification expresses a hypothetical direct segment. This is a single, contiguous
 * region of memory that is translated using a segment-like approach.
 *
 * The segment has a given maximum size, but the actual size can be configured.
 * Moreover, the translation functionality can be disabled.
 *
 * The state is given by two registers:
 *   base: that defines the base address and the permissions
 *   size: the active size of the segment
 *
 * The minimum translation size is 64 bytes.
 * The translation size is a multiple of 64 bytes.
 */

segment TLB(base : addr) {

    // let's assume the maximum size of the segment is 40 bits.
    inbitwidth= 48;

    // let's assume the maximum output bit size is 64 bits
    outbitwidth = 48;

    flags = {
        writable,
        readable,
        executable,
    };

    // the state will be two registers:
    state = StateDef(base: addr) {
        reg inaddr [ 8 ] {
            0 .. 48 val,
        },
        reg outaddr [ 8 ] {
            0 .. 48 val,
        },
        reg length [ 8 ] {
            0 ..  1 present,
            1 ..  2 rw,
            2 ..  3 exec,
            4 .. 48 bytes,
        }
    };

    // the state will be two registers:
    interface = InterfaceDef(base: addr) {
        mmio inaddr [ base, 0, 8 ],
        mmio outaddr [ base, 8, 8 ],
        mmio length [ base, 16, 8 ],
    };

    fn matchflags(flgs : flags) -> bool
        requires state.length.present == 1;
    {
        flgs.writable == state.length.rw && flgs.executable == state.length.exec
    }

    fn translate(va: vaddr) -> paddr
        requires state.length.present == 1;
        requires state.inaddr.val <= va && va < (state.inaddr.val + (state.length.bytes << 4));
    {
        (va + state.outaddr.val) - state.inaddr.val
    }

    synth fn map(va: vaddr, sz: size, flgs: flags, pa : paddr)
        requires sz < (1 << 40)
        requires sz > 0 && ((sz & 0xf) == 0)
        requires (pa & 0xf == 0)

    synth fn protect(va: vaddr, sz: size, flgs: flags);

    synth fn unmap(va: vaddr, sz: size);
 }
