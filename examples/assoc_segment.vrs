/*
 * This specification expresses a hypothetical direct segment. This is a single, contiguous
 * region of memory that is translated using a segment-like approach.
 *
 * The segment has a given maximum size, but the actual size can be configured.
 * Moreover, the translation functionality can be disabled.
 *
 * The state is given by two registers:
 *   base: that defines the base address and the permissions
 *   size: the active size of the segment
 *
 * The minimum translation size is 64 bytes.
 * The translation size is a multiple of 64 bytes.
 */

flags {
    writable,
    readable,
    executable,
}

segment AssocSegment(base : addr) {

    // let's assume the maximum size of the segment is 40 bits.
    inbitwidth= 47;

    // let's assume the maximum output bit size is 64 bits
    outbitwidth = 48;

    // the state will be two registers:
    state(base: addr) {
        reg dst [ 8 ] {
            0 .. 48 val,
        },
        reg src [ 8 ] {
            0 .. 48 val,
        },
        reg length [ 8 ] {
            0 .. 48 bytes,
        },
        reg perms [ 8 ] {
            0 ..  1 present,
            1 ..  2 rw,
            2 ..  3 exec,
        }
    }

    // just expose the entire state as MMIO interface
    interface(base: addr) {
        mmio dst [ base, 0, 8 ],
        mmio src [ base, 8, 8 ],
        mmio length [ base, 16, 8 ],
        mmio perms [ base, 16, 8 ],
    }

    // add the valid bit
    #[remap]
    fn valid() -> bool {
        state.perms.present == 1
    }

    // #[remap]
    // fn range(va: vaddr) -> bool {
    //     va < (state.length.bytes << 4)
    // }

    // define the permission flags
    #[remap]
    fn matchflags(flgs : flags) -> bool
    {
        flgs.writable == state.perms.rw && flgs.executable == state.perms.exec
    }

    // to calculate the new address, we just add the base address here, if within range
    fn translate(va: vaddr) -> paddr
        requires state.src.val <= va && va < state.src.val + state.length.bytes
    {
        (va - state.src.val) + state.dst.val
    }

    synth fn map(va: vaddr, sz: size, flgs: flags, pa : paddr)
        requires (pa + sz < (1 << 47)) && (va + sz < (1 << 47))

    synth fn protect(va: vaddr, sz: size, flgs: flags);

    synth fn unmap(va: vaddr, sz: size);
 }
