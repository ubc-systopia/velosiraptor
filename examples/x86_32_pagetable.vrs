/*
 * 32-bit paging on the x86 architecture involves a two-level page table. For simplicity, we focus
 * here on the leaf page table.
 *
 * A single page table is 4 KiB in total. It contains 1024 32-bit page-table entries.
 * The page table as a whole must be naturally aligned (4 KiB).
 * This also ensures that each entry is naturally aligned to 32-bits (or 4 bytes)
 *
 * The layout of a page table entry is as follows:
 * ```
 *     Bit(s)          Contents
 *     0       (P)     Present; must be 1 to map a 4-KByte page
 *     1       (R/W)   Read/write; if 0, writes may not be allowed to the 4-KByte page referenced
 *                     by this entry
 *     2       (U/S)   User/supervisor; if 0, user-mode accesses are not allowed to the 4-KByte
 *                     page referenced by this entry
 *     3       (PWT)   Page-level write-through; indirectly determines the memory type used to
 *                     access the 4-KByte page referenced by this entry
 *     4       (PCD)   Page-level cache disable; indirectly determines the memory type used to
 *                     access the 4-KByte page referenced by this entry
 *     5       (A)     Accessed; indicates whether software has accessed the 4-KByte page referenced
 *                     by this entry
 *     6       (D)     Dirty; indicates whether software has written to the 4-KByte page referenced by
 *                     this entry
 *     7       (PAT)   If the PAT is supported, indirectly determines the memory type used to access
 *                     the 4-KByte page referenced by this entry; otherwise, reserved (must be 0) 1
 *     8       (G)     Global; if CR4.PGE = 1, determines whether the translation is global;
 *                     ignored otherwise
 *     11:9    (IGN)   Ignored
 *     31:12           Physical address of the 4-KByte page referenced by this entry
 * ```
 */


const PTABLE_ENTRIES    : size = 1024;
const PTABLE_ENTRY_SIZE : size = 4;
const PTABLE_SIZE       :size = (PTABLE_ENTRIES * PTABLE_ENTRY_SIZE);
const PTABLE_ALIGNMENT  : size = PTABLE_SIZE;


const BASE_PAGE_BITS  : size = 12;
const BASE_PAGE_SIZE  : size = (1 << BASE_PAGE_BITS); // 4 KiB

const LARGE_PAGE_BITS : size = 22;
const LARGE_PAGE_SIZE : size = (1 << LARGE_PAGE_BITS); // 4 MiB

const PHYS_ADDR_BITS : size = 32;
const PHYS_ADDR_MAX  : size = (1 << PHYS_ADDR_BITS);


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// x86_32 Page Table
//
////////////////////////////////////////////////////////////////////////////////////////////////////

// represents an x86 page table entry
segment X86_32_PageTableEntry(base : addr) {

    // there are there are 4 KiB pages
    inbitwidth = BASE_PAGE_BITS;

    // it's a 32-bit machine
    outbitwidth = PHYS_ADDR_BITS;

    flags = {
        writable,
        readable,
        devicemem,
        usermode
    };

    // the state
    state = StateDef(base: addr) {
        mem pte [base, 0, 4] {
            // the following fields at starting bit, ending bit, name
            0 ..  1 present,
            1 ..  2 writable,
            2 ..  3 usermode,
            3 ..  4 writethrough,
            4 ..  5 nocache,
            5 ..  6 accessed,
            6 ..  7 dirty,
            7 ..  8 pat,
            8 ..  9 global,
            9 .. 12 ignored,
           12 .. 32 base,
        }
    };

    interface = InterfaceDef(base : addr) {
        mem pte [base, 0, 4]
    };

    fn valid() -> bool {
        state.pte.present == 1
    }

    // matches a translation flags,
    fn matchflags(flgs : flags) -> bool
    {
        (state.pte.writable == flgs.writable)
         && (state.pte.usermode != flgs.usermode)
         && if (flgs.devicemem == 1) {
               (state.pte.nocache == 1 && state.pte.writethrough == 1)
            } else {
                (state.pte.nocache == 0 && state.pte.writethrough == 0)
            }
         && (state.pte.accessed == 1)
         && (state.pte.global == 0)
         && (state.pte.dirty == 0)
    }

    // the translation semantics, adding an option type?
    fn translate(va: vaddr) -> paddr
        requires va < BASE_PAGE_SIZE;
    {
        va + (state.pte.base << BASE_PAGE_BITS)
    }

    // unmapping an entry
    synth fn unmap(va: vaddr, sz: size)
        requires (va == 0);
        requires sz == BASE_PAGE_SIZE;


    // mapping an entry
    synth fn map(va: vaddr, sz: size, flgs: flags, pa : paddr)
        requires va == 0;
        requires sz == BASE_PAGE_SIZE;
        requires (pa & (BASE_PAGE_SIZE - 1)) == 0;

    // protecting the entry, i.e., change its permission
    synth fn protect(va: vaddr, sz: size, flgs: flags)
}


// represents an x86 page table entry
staticmap X86_32_PageTable(base : addr) {
    mapdef = [ X86_32_PageTableEntry(base + i * PTABLE_ENTRY_SIZE) for i in 0..1024 ];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// x86_32 Page Directory
//
////////////////////////////////////////////////////////////////////////////////////////////////////