/*
 * 32-bit paging on the x86 architecture involves a two-level page table. For simplicity, we focus
 * here on the leaf page table.
 *
 * A single page table is 4 KiB in total. It contains 1024 32-bit page-table entries.
 * The page table as a whole must be naturally aligned (4 KiB).
 * This also ensures that each entry is naturally aligned to 32-bits (or 4 bytes)
 *
 * The layout of a page table entry is as follows:
 * ```
 *     Bit(s)          Contents
 *     0       (P)     Present; must be 1 to map a 4-KByte page
 *     1       (R/W)   Read/write; if 0, writes may not be allowed to the 4-KByte page referenced
 *                     by this entry
 *     2       (U/S)   User/supervisor; if 0, user-mode accesses are not allowed to the 4-KByte
 *                     page referenced by this entry
 *     3       (PWT)   Page-level write-through; indirectly determines the memory type used to
 *                     access the 4-KByte page referenced by this entry
 *     4       (PCD)   Page-level cache disable; indirectly determines the memory type used to
 *                     access the 4-KByte page referenced by this entry
 *     5       (A)     Accessed; indicates whether software has accessed the 4-KByte page referenced
 *                     by this entry
 *     6       (D)     Dirty; indicates whether software has written to the 4-KByte page referenced by
 *                     this entry
 *     7       (PAT)   If the PAT is supported, indirectly determines the memory type used to access
 *                     the 4-KByte page referenced by this entry; otherwise, reserved (must be 0) 1
 *     8       (G)     Global; if CR4.PGE = 1, determines whether the translation is global;
 *                     ignored otherwise
 *     11:9    (IGN)   Ignored
 *     31:12           Physical address of the 4-KByte page referenced by this entry
 * ```
 */

// represents an x86 page table entry
segment X86PageTableEntry(base : addr) : Segment {

    const PAGE_SIZE : int = 4096;

    // there are there are 4 KiB pages
    inbitwidth = 12;

    // it's a 32-bit machine
    outbitwidth = 32;

    flags = {
        WRITABLE = 1;
        READABLE = 2;
    }

    // the state
    state = MemoryState(base : addr) {
        pte [base, 0, 4] {
            // the following fields at starting bit, ending bit, name
            0   0 present;
            1   1 writable;
            2   2 usermode;
            3   3 writethrough;
            4   4 nocache;
            5   5 accessed;
            6   6 dirty;
            7   7 pat;
            8   8 global;
            9  11 ignored;
           12  31 base;
        }
    }

    interface = MemoryInterface(base : addr) {
        pte [base, 0, 4] {
            Layout {
                // the following fields at starting bit, ending bit, name
                0   0 present;
                1   1 writable;
                2   2 usermode;
                3   3 writethrough;
                4   4 nocache;
                5   5 accessed;
                6   6 dirty;
                7   7 pat;
                8   8 global;
                9  11 ignored;
                12  31 base;
            };
            ReadAction {
                interface.pte <- state.pte;
            };
            WriteAction {
                interface.pte -> state.pte;
            };
        }
    }

    // unmapping an entry
    fn unmap(va: addr, sz: size) -> bool
        requires va == 0;
        requires sz == PAGE_SIZE;
        // need a way to express:
        // forall a | va <= a < va + sz :: fail(translate(a, ANY))
        ensures translate(va, 0) == 0;
    ;

    // mapping an entry
    fn map(va: addr, sz: size, flgs: flags, pa : addr) -> bool
        requires va == 0;
        requires sz == 4096;
        requires (pa & 0xfff) == 0;

        // need a way to express types:
        // type(addr) == Memory || type(addr) == DevMemory;
        // type(addr) == DevMemory ==> flgs & CACHE_DISABLED
        //
        ensures forall i : addr :: 0 <= i && i < sz && translate(va + i, flgs) == pa + i;
        ensures translate(va, flgs) == pa;
    ;


    // protecting the entry, i.e., change its permission
    fn protect(flgs: flags) -> bool
        ensures matchflags(flgs);
    {
        // update the entry
        // ensures matchflags(flgs) ==> translate(a) == translate(a)
        return true;
    }


    // matches a translation flags,
    fn matchflags(flgs : flags) -> bool
        requires state.pte.present == 1;
    {
/*
        return ((flgs & FLAGS_WRITABLE) || !state.pte.writable)
            && ((flgs & FLAGS_USERMODE) || !state.pte.usermode);
*/
        return true;
    }

    // the translation semantics, adding an option type?
    fn translate(va: addr) -> addr
        requires va < 4096;
        requires state.pte.present == 1;
    {
        return va + (state.pte.base << 12);
    }
}


// represents an x86 page table entry
staticmap X86PageTablet(base : addr) : StaticMap {
    staticmap = [ X86PageTableEntry(base + i * 4) for i in 0..1024 ];
}